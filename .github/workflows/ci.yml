name: CI

on:
  push:
  pull_request:

jobs:
  bless:
    name: Bless
    runs-on: ubuntu-20.04
    env:
      MIX_ENV: test
      EVENTSTORE_HOST: localhost
      EVENTSTORE_VERSION: nightly
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Spawn docker-compose EventStoreDB container
      run: docker-compose up --detach eventstore

    - name: Setup Elixir and Erlang versions
      uses: erlef/setup-beam@v1
      id: beam
      with:
        version-file: .tool-versions
        version-type: strict

    - name: Restore the deps cache
      uses: actions/cache@v3
      id: deps-cache
      with:
        key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-deps
        restore-keys: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-deps
        path: deps

    - name: Restore the _build cache
      uses: actions/cache@v3
      id: build-cache
      with:
        key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ env.MIX_ENV }}-build
        restore-keys: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ env.MIX_ENV }}-build
        path: _build

    - name: Fetch mix dependencies
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Compile dependencies
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: mix deps.compile

    - name: Compile
      run: mix compile --warnings-as-errors --force

    - name: Coveralls
      run: mix coveralls.github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check formatting
      run: mix format --check-formatted

    - name: Credo
      run: mix credo

    - name: Restore PLT cache
      uses: actions/cache/restore@v3
      id: plt-cache
      with:
        key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
        restore-keys: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
        path: priv/plts

    - name: Create PLTs
      shell: sh
      if: steps.plt-cache.outputs.cache-hit != 'true'
      run: mix dialyzer --plt

    - name: Save PLT cache
      uses: actions/cache/save@v3
      if: steps.plt-cache.outputs.cache-hit != 'true'
      with:
        key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
        path: priv/plts

    - name: Run dialyzer
      run: mix dialyzer --format github

  publish-hex-package:
    name: Publish Hex Package ⬆️☁️
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      MIX_ENV: dev
    needs:
    - bless

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Elixir and Erlang versions
      uses: erlef/setup-beam@v1
      id: beam
      with:
        version-file: .tool-versions
        version-type: strict

    - name: Restore the deps cache
      uses: actions/cache@v3
      id: deps-cache
      with:
        key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-deps
        restore-keys: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-deps
        path: deps

    - name: Restore the _build cache
      uses: actions/cache@v3
      id: build-cache
      with:
        key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ env.MIX_ENV }}-build
        restore-keys: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ env.MIX_ENV }}-build
        path: _build

    - name: Fetch mix dependencies
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Compile dependencies
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: mix deps.compile

    - name: Generate documentation
      run: mix docs

    - name: Determine the tag version
      env:
        GITHUB_REF: ${{ github.ref }}
      run: echo "TAG=$(echo "$GITHUB_REF" | awk -F / '{print $3}')" >> $GITHUB_ENV

    - name: Write the tag version to .version
      run: echo $TAG > .version

    - name: Determine the repository name
      run: echo "REPOSITORY=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')" >> $GITHUB_ENV

    - name: Create a GitHub Release
      id: create_release
      uses: NFIBrokerage/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG }}
        release_name: Release ${{ env.TAG }}
        draft: false
        prerelease: false

    - name: Publish library
      run: mix hex.publish --yes
      env:
        HEX_API_KEY: ${{ secrets.HEX_PUBLISH_KEY }}

    - name: Notify ops channel of build success
      run: >
        curl
        -X POST
        -H 'Content-type:application/json'
        -d "{\"text\":\":hexpm: package published for $REPOSITORY $(git tag -ln $TAG)\"}"
        $SLACK_WEBHOOK
      env:
        SLACK_WEBHOOK: ${{ secrets.OPS_CHANNEL_SLACK_WEBHOOK }}
