%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.17.0

-ifndef(persistent).
-define(persistent, true).

-define(persistent_gpb_version, "4.17.0").

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ.OPTIONS_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ.OPTIONS_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadReq.Options',
        {stream_identifier = undefined :: persistent:'event_store.client.shared.StreamIdentifier'() | undefined, % = 1, optional
         group_name = []        :: unicode:chardata() | undefined, % = 2, optional
         buffer_size = 0        :: integer() | undefined, % = 3, optional, 32 bits
         uuid_option = undefined :: persistent:'event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption'() | undefined % = 4, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ.OPTIONS.UUIDOPTION_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ.OPTIONS.UUIDOPTION_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption',
        {content                :: {structured, persistent:'event_store.client.shared.Empty'()} | {string, persistent:'event_store.client.shared.Empty'()} | undefined % oneof
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ.ACK_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ.ACK_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadReq.Ack',
        {id = <<>>              :: iodata() | undefined, % = 1, optional
         ids = []               :: [persistent:'event_store.client.shared.UUID'()] | undefined % = 2, repeated
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ.NACK_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ.NACK_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadReq.Nack',
        {id = <<>>              :: iodata() | undefined, % = 1, optional
         ids = []               :: [persistent:'event_store.client.shared.UUID'()] | undefined, % = 2, repeated
         action = 'Unknown'     :: 'Unknown' | 'Park' | 'Retry' | 'Skip' | 'Stop' | integer() | undefined, % = 3, optional, enum event_store.client.persistent_subscriptions.ReadReq.Nack.Action
         reason = []            :: unicode:chardata() | undefined % = 4, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READREQ_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadReq',
        {content                :: {options, persistent:'event_store.client.persistent_subscriptions.ReadReq.Options'()} | {ack, persistent:'event_store.client.persistent_subscriptions.ReadReq.Ack'()} | {nack, persistent:'event_store.client.persistent_subscriptions.ReadReq.Nack'()} | undefined % oneof
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READRESP.READEVENT_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READRESP.READEVENT_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadResp.ReadEvent',
        {event = undefined      :: persistent:'event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent'() | undefined, % = 1, optional
         link = undefined       :: persistent:'event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent'() | undefined, % = 2, optional
         position               :: {commit_position, non_neg_integer()} | {no_position, persistent:'event_store.client.shared.Empty'()} | undefined, % oneof
         count                  :: {retry_count, integer()} | {no_retry_count, persistent:'event_store.client.shared.Empty'()} | undefined % oneof
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READRESP.READEVENT.RECORDEDEVENT_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READRESP.READEVENT.RECORDEDEVENT_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent',
        {id = undefined         :: persistent:'event_store.client.shared.UUID'() | undefined, % = 1, optional
         stream_identifier = undefined :: persistent:'event_store.client.shared.StreamIdentifier'() | undefined, % = 2, optional
         stream_revision = 0    :: non_neg_integer() | undefined, % = 3, optional, 64 bits
         prepare_position = 0   :: non_neg_integer() | undefined, % = 4, optional, 64 bits
         commit_position = 0    :: non_neg_integer() | undefined, % = 5, optional, 64 bits
         metadata = []          :: [{unicode:chardata(), unicode:chardata()}] | undefined, % = 6
         custom_metadata = <<>> :: iodata() | undefined, % = 7, optional
         data = <<>>            :: iodata() | undefined % = 8, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READRESP.SUBSCRIPTIONCONFIRMATION_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READRESP.SUBSCRIPTIONCONFIRMATION_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation',
        {subscription_id = []   :: unicode:chardata() | undefined % = 1, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READRESP_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.READRESP_PB_H', true).
-record('event_store.client.persistent_subscriptions.ReadResp',
        {content                :: {event, persistent:'event_store.client.persistent_subscriptions.ReadResp.ReadEvent'()} | {subscription_confirmation, persistent:'event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation'()} | undefined % oneof
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.CREATEREQ.OPTIONS_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.CREATEREQ.OPTIONS_PB_H', true).
-record('event_store.client.persistent_subscriptions.CreateReq.Options',
        {stream_identifier = undefined :: persistent:'event_store.client.shared.StreamIdentifier'() | undefined, % = 1, optional
         group_name = []        :: unicode:chardata() | undefined, % = 2, optional
         settings = undefined   :: persistent:'event_store.client.persistent_subscriptions.CreateReq.Settings'() | undefined % = 3, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.CREATEREQ.SETTINGS_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.CREATEREQ.SETTINGS_PB_H', true).
-record('event_store.client.persistent_subscriptions.CreateReq.Settings',
        {resolve_links = false  :: boolean() | 0 | 1 | undefined, % = 1, optional
         revision = 0           :: non_neg_integer() | undefined, % = 2, optional, 64 bits
         extra_statistics = false :: boolean() | 0 | 1 | undefined, % = 3, optional
         max_retry_count = 0    :: integer() | undefined, % = 5, optional, 32 bits
         min_checkpoint_count = 0 :: integer() | undefined, % = 7, optional, 32 bits
         max_checkpoint_count = 0 :: integer() | undefined, % = 8, optional, 32 bits
         max_subscriber_count = 0 :: integer() | undefined, % = 9, optional, 32 bits
         live_buffer_size = 0   :: integer() | undefined, % = 10, optional, 32 bits
         read_batch_size = 0    :: integer() | undefined, % = 11, optional, 32 bits
         history_buffer_size = 0 :: integer() | undefined, % = 12, optional, 32 bits
         named_consumer_strategy = 'DispatchToSingle' :: 'DispatchToSingle' | 'RoundRobin' | 'Pinned' | integer() | undefined, % = 13, optional, enum event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy
         message_timeout        :: {message_timeout_ticks, integer()} | {message_timeout_ms, integer()} | undefined, % oneof
         checkpoint_after       :: {checkpoint_after_ticks, integer()} | {checkpoint_after_ms, integer()} | undefined % oneof
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.CREATEREQ_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.CREATEREQ_PB_H', true).
-record('event_store.client.persistent_subscriptions.CreateReq',
        {options = undefined    :: persistent:'event_store.client.persistent_subscriptions.CreateReq.Options'() | undefined % = 1, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.CREATERESP_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.CREATERESP_PB_H', true).
-record('event_store.client.persistent_subscriptions.CreateResp',
        {
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.UPDATEREQ.OPTIONS_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.UPDATEREQ.OPTIONS_PB_H', true).
-record('event_store.client.persistent_subscriptions.UpdateReq.Options',
        {stream_identifier = undefined :: persistent:'event_store.client.shared.StreamIdentifier'() | undefined, % = 1, optional
         group_name = []        :: unicode:chardata() | undefined, % = 2, optional
         settings = undefined   :: persistent:'event_store.client.persistent_subscriptions.UpdateReq.Settings'() | undefined % = 3, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.UPDATEREQ.SETTINGS_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.UPDATEREQ.SETTINGS_PB_H', true).
-record('event_store.client.persistent_subscriptions.UpdateReq.Settings',
        {resolve_links = false  :: boolean() | 0 | 1 | undefined, % = 1, optional
         revision = 0           :: non_neg_integer() | undefined, % = 2, optional, 64 bits
         extra_statistics = false :: boolean() | 0 | 1 | undefined, % = 3, optional
         max_retry_count = 0    :: integer() | undefined, % = 5, optional, 32 bits
         min_checkpoint_count = 0 :: integer() | undefined, % = 7, optional, 32 bits
         max_checkpoint_count = 0 :: integer() | undefined, % = 8, optional, 32 bits
         max_subscriber_count = 0 :: integer() | undefined, % = 9, optional, 32 bits
         live_buffer_size = 0   :: integer() | undefined, % = 10, optional, 32 bits
         read_batch_size = 0    :: integer() | undefined, % = 11, optional, 32 bits
         history_buffer_size = 0 :: integer() | undefined, % = 12, optional, 32 bits
         named_consumer_strategy = 'DispatchToSingle' :: 'DispatchToSingle' | 'RoundRobin' | 'Pinned' | integer() | undefined, % = 13, optional, enum event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy
         message_timeout        :: {message_timeout_ticks, integer()} | {message_timeout_ms, integer()} | undefined, % oneof
         checkpoint_after       :: {checkpoint_after_ticks, integer()} | {checkpoint_after_ms, integer()} | undefined % oneof
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.UPDATEREQ_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.UPDATEREQ_PB_H', true).
-record('event_store.client.persistent_subscriptions.UpdateReq',
        {options = undefined    :: persistent:'event_store.client.persistent_subscriptions.UpdateReq.Options'() | undefined % = 1, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.UPDATERESP_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.UPDATERESP_PB_H', true).
-record('event_store.client.persistent_subscriptions.UpdateResp',
        {
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.DELETEREQ.OPTIONS_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.DELETEREQ.OPTIONS_PB_H', true).
-record('event_store.client.persistent_subscriptions.DeleteReq.Options',
        {stream_identifier = undefined :: persistent:'event_store.client.shared.StreamIdentifier'() | undefined, % = 1, optional
         group_name = []        :: unicode:chardata() | undefined % = 2, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.DELETEREQ_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.DELETEREQ_PB_H', true).
-record('event_store.client.persistent_subscriptions.DeleteReq',
        {options = undefined    :: persistent:'event_store.client.persistent_subscriptions.DeleteReq.Options'() | undefined % = 1, optional
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.DELETERESP_PB_H').
-define('EVENT_STORE.CLIENT.PERSISTENT_SUBSCRIPTIONS.DELETERESP_PB_H', true).
-record('event_store.client.persistent_subscriptions.DeleteResp',
        {
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.SHARED.UUID.STRUCTURED_PB_H').
-define('EVENT_STORE.CLIENT.SHARED.UUID.STRUCTURED_PB_H', true).
-record('event_store.client.shared.UUID.Structured',
        {most_significant_bits = 0 :: integer() | undefined, % = 1, optional, 64 bits
         least_significant_bits = 0 :: integer() | undefined % = 2, optional, 64 bits
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.SHARED.UUID_PB_H').
-define('EVENT_STORE.CLIENT.SHARED.UUID_PB_H', true).
-record('event_store.client.shared.UUID',
        {value                  :: {structured, persistent:'event_store.client.shared.UUID.Structured'()} | {string, unicode:chardata()} | undefined % oneof
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.SHARED.EMPTY_PB_H').
-define('EVENT_STORE.CLIENT.SHARED.EMPTY_PB_H', true).
-record('event_store.client.shared.Empty',
        {
        }).
-endif.

-ifndef('EVENT_STORE.CLIENT.SHARED.STREAMIDENTIFIER_PB_H').
-define('EVENT_STORE.CLIENT.SHARED.STREAMIDENTIFIER_PB_H', true).
-record('event_store.client.shared.StreamIdentifier',
        {streamName = <<>>      :: iodata() | undefined % = 3, optional
        }).
-endif.

-endif.
