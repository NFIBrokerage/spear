%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.18.0
%% Version source: file
-module(spear_proto_code).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_google.rpc.Code'/1, 'enum_value_by_symbol_google.rpc.Code'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("spear_proto_code.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'google.rpc.Code'() :: 'OK' | 'CANCELLED' | 'UNKNOWN' | 'INVALID_ARGUMENT' | 'DEADLINE_EXCEEDED' | 'NOT_FOUND' | 'ALREADY_EXISTS' | 'PERMISSION_DENIED' | 'UNAUTHENTICATED' | 'RESOURCE_EXHAUSTED' | 'FAILED_PRECONDITION' | 'ABORTED' | 'OUT_OF_RANGE' | 'UNIMPLEMENTED' | 'INTERNAL' | 'UNAVAILABLE' | 'DATA_LOSS'.
-export_type(['google.rpc.Code'/0]).

%% message types

-export_type([]).
-type '$msg_name'() :: none().
-type '$msg'() :: none().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg(_) -> no_return().
encode_msg(Msg) -> encode_msg(Msg, dummy_name, []).

-spec encode_msg(_,_) -> no_return().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(_,_,_) -> no_return().
encode_msg(_Msg, _MsgName, _Opts) -> erlang:error({gpb_error, no_messages}).


-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


-spec decode_msg(binary(), atom()) -> no_return().
decode_msg(Bin, _MsgName) when is_binary(Bin) -> erlang:error({gpb_error, no_messages}).

-spec decode_msg(binary(), atom(), list()) -> no_return().
decode_msg(Bin, _MsgName, _Opts) when is_binary(Bin) -> erlang:error({gpb_error, no_messages}).





-spec merge_msgs(_, _) -> no_return().
merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

-spec merge_msgs(_, _, _) -> no_return().
merge_msgs(_Prev, _New, _MsgNameOrOpts) -> erlang:error({gpb_error, no_messages}).

merge_msgs(_Prev, _New, _MsgName, _Opts) -> erlang:error({gpb_error, no_messages}).


-spec verify_msg(_) -> no_return().
verify_msg(Msg) -> verify_msg(Msg, []).

-spec verify_msg(_,_) -> no_return().
verify_msg(Msg, _OptsOrMsgName) -> mk_type_error(not_a_known_message, Msg, []).


-spec verify_msg(_,_,_) -> no_return().
verify_msg(Msg, _MsgName, _Opts) -> mk_type_error(not_a_known_message, Msg, []).



-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level.


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'google.rpc.Code'},
      [{'OK', 0},
       {'CANCELLED', 1},
       {'UNKNOWN', 2},
       {'INVALID_ARGUMENT', 3},
       {'DEADLINE_EXCEEDED', 4},
       {'NOT_FOUND', 5},
       {'ALREADY_EXISTS', 6},
       {'PERMISSION_DENIED', 7},
       {'UNAUTHENTICATED', 16},
       {'RESOURCE_EXHAUSTED', 8},
       {'FAILED_PRECONDITION', 9},
       {'ABORTED', 10},
       {'OUT_OF_RANGE', 11},
       {'UNIMPLEMENTED', 12},
       {'INTERNAL', 13},
       {'UNAVAILABLE', 14},
       {'DATA_LOSS', 15}]}].


get_msg_names() -> [].


get_group_names() -> [].


get_msg_or_group_names() -> [].


get_enum_names() -> ['google.rpc.Code'].


-spec fetch_msg_def(_) -> no_return().
fetch_msg_def(MsgName) -> erlang:error({no_such_msg, MsgName}).


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(_) -> error.


find_enum_def('google.rpc.Code') ->
    [{'OK', 0},
     {'CANCELLED', 1},
     {'UNKNOWN', 2},
     {'INVALID_ARGUMENT', 3},
     {'DEADLINE_EXCEEDED', 4},
     {'NOT_FOUND', 5},
     {'ALREADY_EXISTS', 6},
     {'PERMISSION_DENIED', 7},
     {'UNAUTHENTICATED', 16},
     {'RESOURCE_EXHAUSTED', 8},
     {'FAILED_PRECONDITION', 9},
     {'ABORTED', 10},
     {'OUT_OF_RANGE', 11},
     {'UNIMPLEMENTED', 12},
     {'INTERNAL', 13},
     {'UNAVAILABLE', 14},
     {'DATA_LOSS', 15}];
find_enum_def(_) -> error.


enum_symbol_by_value('google.rpc.Code', Value) -> 'enum_symbol_by_value_google.rpc.Code'(Value).


enum_value_by_symbol('google.rpc.Code', Sym) -> 'enum_value_by_symbol_google.rpc.Code'(Sym).


'enum_symbol_by_value_google.rpc.Code'(0) -> 'OK';
'enum_symbol_by_value_google.rpc.Code'(1) -> 'CANCELLED';
'enum_symbol_by_value_google.rpc.Code'(2) -> 'UNKNOWN';
'enum_symbol_by_value_google.rpc.Code'(3) -> 'INVALID_ARGUMENT';
'enum_symbol_by_value_google.rpc.Code'(4) -> 'DEADLINE_EXCEEDED';
'enum_symbol_by_value_google.rpc.Code'(5) -> 'NOT_FOUND';
'enum_symbol_by_value_google.rpc.Code'(6) -> 'ALREADY_EXISTS';
'enum_symbol_by_value_google.rpc.Code'(7) -> 'PERMISSION_DENIED';
'enum_symbol_by_value_google.rpc.Code'(16) -> 'UNAUTHENTICATED';
'enum_symbol_by_value_google.rpc.Code'(8) -> 'RESOURCE_EXHAUSTED';
'enum_symbol_by_value_google.rpc.Code'(9) -> 'FAILED_PRECONDITION';
'enum_symbol_by_value_google.rpc.Code'(10) -> 'ABORTED';
'enum_symbol_by_value_google.rpc.Code'(11) -> 'OUT_OF_RANGE';
'enum_symbol_by_value_google.rpc.Code'(12) -> 'UNIMPLEMENTED';
'enum_symbol_by_value_google.rpc.Code'(13) -> 'INTERNAL';
'enum_symbol_by_value_google.rpc.Code'(14) -> 'UNAVAILABLE';
'enum_symbol_by_value_google.rpc.Code'(15) -> 'DATA_LOSS'.


'enum_value_by_symbol_google.rpc.Code'('OK') -> 0;
'enum_value_by_symbol_google.rpc.Code'('CANCELLED') -> 1;
'enum_value_by_symbol_google.rpc.Code'('UNKNOWN') -> 2;
'enum_value_by_symbol_google.rpc.Code'('INVALID_ARGUMENT') -> 3;
'enum_value_by_symbol_google.rpc.Code'('DEADLINE_EXCEEDED') -> 4;
'enum_value_by_symbol_google.rpc.Code'('NOT_FOUND') -> 5;
'enum_value_by_symbol_google.rpc.Code'('ALREADY_EXISTS') -> 6;
'enum_value_by_symbol_google.rpc.Code'('PERMISSION_DENIED') -> 7;
'enum_value_by_symbol_google.rpc.Code'('UNAUTHENTICATED') -> 16;
'enum_value_by_symbol_google.rpc.Code'('RESOURCE_EXHAUSTED') -> 8;
'enum_value_by_symbol_google.rpc.Code'('FAILED_PRECONDITION') -> 9;
'enum_value_by_symbol_google.rpc.Code'('ABORTED') -> 10;
'enum_value_by_symbol_google.rpc.Code'('OUT_OF_RANGE') -> 11;
'enum_value_by_symbol_google.rpc.Code'('UNIMPLEMENTED') -> 12;
'enum_value_by_symbol_google.rpc.Code'('INTERNAL') -> 13;
'enum_value_by_symbol_google.rpc.Code'('UNAVAILABLE') -> 14;
'enum_value_by_symbol_google.rpc.Code'('DATA_LOSS') -> 15.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


-spec msg_name_to_fqbin(_) -> no_return().
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_msg_name(_) -> no_return().
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"google.rpc.Code">>) -> 'google.rpc.Code';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('google.rpc.Code') -> <<"google.rpc.Code">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'google.rpc'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "code.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["code.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["code"].


get_msg_containment("code") -> [];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("code") -> 'google.rpc';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("code") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("code") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("code") -> ['google.rpc.Code'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


-spec get_proto_by_msg_name_as_fqbin(_) -> no_return().
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"google.rpc.Code">>) -> "code";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"google.rpc">>) -> ["code"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.18.0".

gpb_version_as_list() ->
    [4,18,0].

gpb_version_source() ->
    "file".
