%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.17.0
-module(gossip).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'/1, 'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("gossip.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'event_store.client.gossip.MemberInfo.VNodeState'() :: 'Initializing' | 'DiscoverLeader' | 'Unknown' | 'PreReplica' | 'CatchingUp' | 'Clone' | 'Follower' | 'PreLeader' | 'Leader' | 'Manager' | 'ShuttingDown' | 'Shutdown' | 'ReadOnlyLeaderless' | 'PreReadOnlyReplica' | 'ReadOnlyReplica' | 'ResigningLeader'.
-export_type(['event_store.client.gossip.MemberInfo.VNodeState'/0]).

%% message types
-type 'event_store.client.gossip.ClusterInfo'() :: #'event_store.client.gossip.ClusterInfo'{}.

-type 'event_store.client.gossip.EndPoint'() :: #'event_store.client.gossip.EndPoint'{}.

-type 'event_store.client.gossip.MemberInfo'() :: #'event_store.client.gossip.MemberInfo'{}.

-type 'event_store.client.shared.UUID.Structured'() :: #'event_store.client.shared.UUID.Structured'{}.

-type 'event_store.client.shared.UUID'() :: #'event_store.client.shared.UUID'{}.

-type 'event_store.client.shared.Empty'() :: #'event_store.client.shared.Empty'{}.

-type 'event_store.client.shared.StreamIdentifier'() :: #'event_store.client.shared.StreamIdentifier'{}.

-export_type(['event_store.client.gossip.ClusterInfo'/0, 'event_store.client.gossip.EndPoint'/0, 'event_store.client.gossip.MemberInfo'/0, 'event_store.client.shared.UUID.Structured'/0, 'event_store.client.shared.UUID'/0, 'event_store.client.shared.Empty'/0, 'event_store.client.shared.StreamIdentifier'/0]).
-type '$msg_name'() :: 'event_store.client.gossip.ClusterInfo' | 'event_store.client.gossip.EndPoint' | 'event_store.client.gossip.MemberInfo' | 'event_store.client.shared.UUID.Structured' | 'event_store.client.shared.UUID' | 'event_store.client.shared.Empty' | 'event_store.client.shared.StreamIdentifier'.
-type '$msg'() :: 'event_store.client.gossip.ClusterInfo'() | 'event_store.client.gossip.EndPoint'() | 'event_store.client.gossip.MemberInfo'() | 'event_store.client.shared.UUID.Structured'() | 'event_store.client.shared.UUID'() | 'event_store.client.shared.Empty'() | 'event_store.client.shared.StreamIdentifier'().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'event_store.client.gossip.ClusterInfo' -> 'encode_msg_event_store.client.gossip.ClusterInfo'(id(Msg, TrUserData), TrUserData);
        'event_store.client.gossip.EndPoint' -> 'encode_msg_event_store.client.gossip.EndPoint'(id(Msg, TrUserData), TrUserData);
        'event_store.client.gossip.MemberInfo' -> 'encode_msg_event_store.client.gossip.MemberInfo'(id(Msg, TrUserData), TrUserData);
        'event_store.client.shared.UUID.Structured' -> 'encode_msg_event_store.client.shared.UUID.Structured'(id(Msg, TrUserData), TrUserData);
        'event_store.client.shared.UUID' -> 'encode_msg_event_store.client.shared.UUID'(id(Msg, TrUserData), TrUserData);
        'event_store.client.shared.Empty' -> 'encode_msg_event_store.client.shared.Empty'(id(Msg, TrUserData), TrUserData);
        'event_store.client.shared.StreamIdentifier' -> 'encode_msg_event_store.client.shared.StreamIdentifier'(id(Msg, TrUserData), TrUserData)
    end.


'encode_msg_event_store.client.gossip.ClusterInfo'(Msg, TrUserData) -> 'encode_msg_event_store.client.gossip.ClusterInfo'(Msg, <<>>, TrUserData).


'encode_msg_event_store.client.gossip.ClusterInfo'(#'event_store.client.gossip.ClusterInfo'{members = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> 'e_field_event_store.client.gossip.ClusterInfo_members'(TrF1, Bin, TrUserData)
        end
    end.

'encode_msg_event_store.client.gossip.EndPoint'(Msg, TrUserData) -> 'encode_msg_event_store.client.gossip.EndPoint'(Msg, <<>>, TrUserData).


'encode_msg_event_store.client.gossip.EndPoint'(#'event_store.client.gossip.EndPoint'{address = F1, port = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

'encode_msg_event_store.client.gossip.MemberInfo'(Msg, TrUserData) -> 'encode_msg_event_store.client.gossip.MemberInfo'(Msg, <<>>, TrUserData).


'encode_msg_event_store.client.gossip.MemberInfo'(#'event_store.client.gossip.MemberInfo'{instance_id = F1, time_stamp = F2, state = F3, is_alive = F4, http_end_point = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true -> 'e_mfield_event_store.client.gossip.MemberInfo_instance_id'(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 'Initializing'; TrF3 =:= 0 -> B2;
                       true -> 'e_enum_event_store.client.gossip.MemberInfo.VNodeState'(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= false -> B3;
                       true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
         end,
    if F5 == undefined -> B4;
       true ->
           begin
               TrF5 = id(F5, TrUserData),
               if TrF5 =:= undefined -> B4;
                  true -> 'e_mfield_event_store.client.gossip.MemberInfo_http_end_point'(TrF5, <<B4/binary, 42>>, TrUserData)
               end
           end
    end.

'encode_msg_event_store.client.shared.UUID.Structured'(Msg, TrUserData) -> 'encode_msg_event_store.client.shared.UUID.Structured'(Msg, <<>>, TrUserData).


'encode_msg_event_store.client.shared.UUID.Structured'(#'event_store.client.shared.UUID.Structured'{most_significant_bits = F1, least_significant_bits = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

'encode_msg_event_store.client.shared.UUID'(Msg, TrUserData) -> 'encode_msg_event_store.client.shared.UUID'(Msg, <<>>, TrUserData).


'encode_msg_event_store.client.shared.UUID'(#'event_store.client.shared.UUID'{value = F1}, Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
           case id(F1, TrUserData) of
               {structured, TF1} -> begin TrTF1 = id(TF1, TrUserData), 'e_mfield_event_store.client.shared.UUID_structured'(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
               {string, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_string(TrTF1, <<Bin/binary, 18>>, TrUserData) end
           end
    end.

'encode_msg_event_store.client.shared.Empty'(_Msg, _TrUserData) -> <<>>.

'encode_msg_event_store.client.shared.StreamIdentifier'(Msg, TrUserData) -> 'encode_msg_event_store.client.shared.StreamIdentifier'(Msg, <<>>, TrUserData).


'encode_msg_event_store.client.shared.StreamIdentifier'(#'event_store.client.shared.StreamIdentifier'{streamName = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               case iolist_size(TrF1) of
                   0 -> Bin;
                   _ -> e_type_bytes(TrF1, <<Bin/binary, 26>>, TrUserData)
               end
           end
    end.

'e_mfield_event_store.client.gossip.ClusterInfo_members'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_event_store.client.gossip.MemberInfo'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_event_store.client.gossip.ClusterInfo_members'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_event_store.client.gossip.ClusterInfo_members'(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_event_store.client.gossip.ClusterInfo_members'(Rest, Bin3, TrUserData);
'e_field_event_store.client.gossip.ClusterInfo_members'([], Bin, _TrUserData) -> Bin.

'e_mfield_event_store.client.gossip.MemberInfo_instance_id'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_event_store.client.shared.UUID'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_event_store.client.gossip.MemberInfo_http_end_point'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_event_store.client.gossip.EndPoint'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_event_store.client.shared.UUID_structured'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_event_store.client.shared.UUID.Structured'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('Initializing', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('DiscoverLeader', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('Unknown', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('PreReplica', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('CatchingUp', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('Clone', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('Follower', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('PreLeader', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('Leader', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('Manager', Bin, _TrUserData) -> <<Bin/binary, 9>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('ShuttingDown', Bin, _TrUserData) -> <<Bin/binary, 10>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('Shutdown', Bin, _TrUserData) -> <<Bin/binary, 11>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('ReadOnlyLeaderless', Bin, _TrUserData) -> <<Bin/binary, 12>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('PreReadOnlyReplica', Bin, _TrUserData) -> <<Bin/binary, 13>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('ReadOnlyReplica', Bin, _TrUserData) -> <<Bin/binary, 14>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'('ResigningLeader', Bin, _TrUserData) -> <<Bin/binary, 15>>;
'e_enum_event_store.client.gossip.MemberInfo.VNodeState'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('event_store.client.gossip.ClusterInfo', Bin, TrUserData) -> id('decode_msg_event_store.client.gossip.ClusterInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('event_store.client.gossip.EndPoint', Bin, TrUserData) -> id('decode_msg_event_store.client.gossip.EndPoint'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('event_store.client.gossip.MemberInfo', Bin, TrUserData) -> id('decode_msg_event_store.client.gossip.MemberInfo'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('event_store.client.shared.UUID.Structured', Bin, TrUserData) -> id('decode_msg_event_store.client.shared.UUID.Structured'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('event_store.client.shared.UUID', Bin, TrUserData) -> id('decode_msg_event_store.client.shared.UUID'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('event_store.client.shared.Empty', Bin, TrUserData) -> id('decode_msg_event_store.client.shared.Empty'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('event_store.client.shared.StreamIdentifier', Bin, TrUserData) -> id('decode_msg_event_store.client.shared.StreamIdentifier'(Bin, TrUserData), TrUserData).



'decode_msg_event_store.client.gossip.ClusterInfo'(Bin, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_event_store.client.gossip.ClusterInfo_members'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(<<>>, 0, 0, _, R1, TrUserData) -> #'event_store.client.gossip.ClusterInfo'{members = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(Other, Z1, Z2, F, F@_1, TrUserData) -> 'dg_read_field_def_event_store.client.gossip.ClusterInfo'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_event_store.client.gossip.ClusterInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_event_store.client.gossip.ClusterInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_event_store.client.gossip.ClusterInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_event_store.client.gossip.ClusterInfo_members'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_event_store.client.gossip.ClusterInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> 'skip_64_event_store.client.gossip.ClusterInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> 'skip_length_delimited_event_store.client.gossip.ClusterInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> 'skip_group_event_store.client.gossip.ClusterInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> 'skip_32_event_store.client.gossip.ClusterInfo'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_event_store.client.gossip.ClusterInfo'(<<>>, 0, 0, _, R1, TrUserData) -> #'event_store.client.gossip.ClusterInfo'{members = lists_reverse(R1, TrUserData)}.

'd_field_event_store.client.gossip.ClusterInfo_members'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'd_field_event_store.client.gossip.ClusterInfo_members'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_event_store.client.gossip.ClusterInfo_members'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_event_store.client.gossip.MemberInfo'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

'skip_varint_event_store.client.gossip.ClusterInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'skip_varint_event_store.client.gossip.ClusterInfo'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_event_store.client.gossip.ClusterInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_event_store.client.gossip.ClusterInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'skip_length_delimited_event_store.client.gossip.ClusterInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_event_store.client.gossip.ClusterInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_event_store.client.gossip.ClusterInfo'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_event_store.client.gossip.ClusterInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_event_store.client.gossip.ClusterInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.ClusterInfo'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_event_store.client.gossip.EndPoint'(Bin, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.EndPoint'(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), TrUserData).

'dfp_read_field_def_event_store.client.gossip.EndPoint'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_event_store.client.gossip.EndPoint_address'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_event_store.client.gossip.EndPoint'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_event_store.client.gossip.EndPoint_port'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_event_store.client.gossip.EndPoint'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'event_store.client.gossip.EndPoint'{address = F@_1, port = F@_2};
'dfp_read_field_def_event_store.client.gossip.EndPoint'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_event_store.client.gossip.EndPoint'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_event_store.client.gossip.EndPoint'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_event_store.client.gossip.EndPoint'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_event_store.client.gossip.EndPoint'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_event_store.client.gossip.EndPoint_address'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_event_store.client.gossip.EndPoint_port'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_event_store.client.gossip.EndPoint'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_event_store.client.gossip.EndPoint'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_event_store.client.gossip.EndPoint'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_event_store.client.gossip.EndPoint'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_event_store.client.gossip.EndPoint'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_event_store.client.gossip.EndPoint'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'event_store.client.gossip.EndPoint'{address = F@_1, port = F@_2}.

'd_field_event_store.client.gossip.EndPoint_address'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_event_store.client.gossip.EndPoint_address'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_event_store.client.gossip.EndPoint_address'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_event_store.client.gossip.EndPoint'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_event_store.client.gossip.EndPoint_port'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_event_store.client.gossip.EndPoint_port'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_event_store.client.gossip.EndPoint_port'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    'dfp_read_field_def_event_store.client.gossip.EndPoint'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_event_store.client.gossip.EndPoint'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_event_store.client.gossip.EndPoint'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_event_store.client.gossip.EndPoint'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.EndPoint'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_event_store.client.gossip.EndPoint'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_event_store.client.gossip.EndPoint'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_event_store.client.gossip.EndPoint'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_event_store.client.gossip.EndPoint'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_event_store.client.gossip.EndPoint'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_event_store.client.gossip.EndPoint'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_event_store.client.gossip.EndPoint'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.EndPoint'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_event_store.client.gossip.EndPoint'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.EndPoint'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_event_store.client.gossip.MemberInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(Bin, 0, 0, 0, id(undefined, TrUserData), id(0, TrUserData), id('Initializing', TrUserData), id(false, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_event_store.client.gossip.MemberInfo'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'd_field_event_store.client.gossip.MemberInfo_instance_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_event_store.client.gossip.MemberInfo'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'd_field_event_store.client.gossip.MemberInfo_time_stamp'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_event_store.client.gossip.MemberInfo'(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_event_store.client.gossip.MemberInfo_state'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_event_store.client.gossip.MemberInfo'(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_event_store.client.gossip.MemberInfo_is_alive'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_event_store.client.gossip.MemberInfo'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'd_field_event_store.client.gossip.MemberInfo_http_end_point'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_event_store.client.gossip.MemberInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'event_store.client.gossip.MemberInfo'{instance_id = F@_1, time_stamp = F@_2, state = F@_3, is_alive = F@_4, http_end_point = F@_5};
'dfp_read_field_def_event_store.client.gossip.MemberInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dg_read_field_def_event_store.client.gossip.MemberInfo'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_event_store.client.gossip.MemberInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_event_store.client.gossip.MemberInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dg_read_field_def_event_store.client.gossip.MemberInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_event_store.client.gossip.MemberInfo_instance_id'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> 'd_field_event_store.client.gossip.MemberInfo_time_stamp'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> 'd_field_event_store.client.gossip.MemberInfo_state'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> 'd_field_event_store.client.gossip.MemberInfo_is_alive'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> 'd_field_event_store.client.gossip.MemberInfo_http_end_point'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_event_store.client.gossip.MemberInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> 'skip_64_event_store.client.gossip.MemberInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> 'skip_length_delimited_event_store.client.gossip.MemberInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> 'skip_group_event_store.client.gossip.MemberInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> 'skip_32_event_store.client.gossip.MemberInfo'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
'dg_read_field_def_event_store.client.gossip.MemberInfo'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'event_store.client.gossip.MemberInfo'{instance_id = F@_1, time_stamp = F@_2, state = F@_3, is_alive = F@_4, http_end_point = F@_5}.

'd_field_event_store.client.gossip.MemberInfo_instance_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_event_store.client.gossip.MemberInfo_instance_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_event_store.client.gossip.MemberInfo_instance_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_event_store.client.shared.UUID'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(RestF,
                                                              0,
                                                              0,
                                                              F,
                                                              if Prev == undefined -> NewFValue;
                                                                 true -> 'merge_msg_event_store.client.shared.UUID'(Prev, NewFValue, TrUserData)
                                                              end,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              TrUserData).

'd_field_event_store.client.gossip.MemberInfo_time_stamp'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_event_store.client.gossip.MemberInfo_time_stamp'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_event_store.client.gossip.MemberInfo_time_stamp'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

'd_field_event_store.client.gossip.MemberInfo_state'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_event_store.client.gossip.MemberInfo_state'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_event_store.client.gossip.MemberInfo_state'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_event_store.client.gossip.MemberInfo.VNodeState'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

'd_field_event_store.client.gossip.MemberInfo_is_alive'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_event_store.client.gossip.MemberInfo_is_alive'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_event_store.client.gossip.MemberInfo_is_alive'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

'd_field_event_store.client.gossip.MemberInfo_http_end_point'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'd_field_event_store.client.gossip.MemberInfo_http_end_point'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_event_store.client.gossip.MemberInfo_http_end_point'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_event_store.client.gossip.EndPoint'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(RestF,
                                                              0,
                                                              0,
                                                              F,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              if Prev == undefined -> NewFValue;
                                                                 true -> 'merge_msg_event_store.client.gossip.EndPoint'(Prev, NewFValue, TrUserData)
                                                              end,
                                                              TrUserData).

'skip_varint_event_store.client.gossip.MemberInfo'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'skip_varint_event_store.client.gossip.MemberInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_event_store.client.gossip.MemberInfo'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_event_store.client.gossip.MemberInfo'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'skip_length_delimited_event_store.client.gossip.MemberInfo'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_length_delimited_event_store.client.gossip.MemberInfo'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_event_store.client.gossip.MemberInfo'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_event_store.client.gossip.MemberInfo'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_32_event_store.client.gossip.MemberInfo'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.MemberInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_event_store.client.gossip.MemberInfo'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_event_store.client.gossip.MemberInfo'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'decode_msg_event_store.client.shared.UUID.Structured'(Bin, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.UUID.Structured'(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

'dfp_read_field_def_event_store.client.shared.UUID.Structured'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_event_store.client.shared.UUID.Structured_most_significant_bits'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_event_store.client.shared.UUID.Structured'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_event_store.client.shared.UUID.Structured_least_significant_bits'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_event_store.client.shared.UUID.Structured'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'event_store.client.shared.UUID.Structured'{most_significant_bits = F@_1, least_significant_bits = F@_2};
'dfp_read_field_def_event_store.client.shared.UUID.Structured'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_event_store.client.shared.UUID.Structured'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_event_store.client.shared.UUID.Structured'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_event_store.client.shared.UUID.Structured'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_event_store.client.shared.UUID.Structured'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_event_store.client.shared.UUID.Structured_most_significant_bits'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_event_store.client.shared.UUID.Structured_least_significant_bits'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_event_store.client.shared.UUID.Structured'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_event_store.client.shared.UUID.Structured'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_event_store.client.shared.UUID.Structured'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_event_store.client.shared.UUID.Structured'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_event_store.client.shared.UUID.Structured'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_event_store.client.shared.UUID.Structured'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'event_store.client.shared.UUID.Structured'{most_significant_bits = F@_1, least_significant_bits = F@_2}.

'd_field_event_store.client.shared.UUID.Structured_most_significant_bits'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_event_store.client.shared.UUID.Structured_most_significant_bits'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_event_store.client.shared.UUID.Structured_most_significant_bits'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_event_store.client.shared.UUID.Structured'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_event_store.client.shared.UUID.Structured_least_significant_bits'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'd_field_event_store.client.shared.UUID.Structured_least_significant_bits'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_event_store.client.shared.UUID.Structured_least_significant_bits'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    'dfp_read_field_def_event_store.client.shared.UUID.Structured'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_event_store.client.shared.UUID.Structured'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_event_store.client.shared.UUID.Structured'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_event_store.client.shared.UUID.Structured'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.UUID.Structured'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_event_store.client.shared.UUID.Structured'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 ->
    'skip_length_delimited_event_store.client.shared.UUID.Structured'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_event_store.client.shared.UUID.Structured'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_event_store.client.shared.UUID.Structured'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_event_store.client.shared.UUID.Structured'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_event_store.client.shared.UUID.Structured'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_event_store.client.shared.UUID.Structured'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.UUID.Structured'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_event_store.client.shared.UUID.Structured'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.UUID.Structured'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_event_store.client.shared.UUID'(Bin, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.UUID'(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_event_store.client.shared.UUID'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_event_store.client.shared.UUID_structured'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_event_store.client.shared.UUID'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_event_store.client.shared.UUID_string'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_event_store.client.shared.UUID'(<<>>, 0, 0, _, F@_1, _) -> #'event_store.client.shared.UUID'{value = F@_1};
'dfp_read_field_def_event_store.client.shared.UUID'(Other, Z1, Z2, F, F@_1, TrUserData) -> 'dg_read_field_def_event_store.client.shared.UUID'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_event_store.client.shared.UUID'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_event_store.client.shared.UUID'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_event_store.client.shared.UUID'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_event_store.client.shared.UUID_structured'(Rest, 0, 0, 0, F@_1, TrUserData);
        18 -> 'd_field_event_store.client.shared.UUID_string'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_event_store.client.shared.UUID'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> 'skip_64_event_store.client.shared.UUID'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> 'skip_length_delimited_event_store.client.shared.UUID'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> 'skip_group_event_store.client.shared.UUID'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> 'skip_32_event_store.client.shared.UUID'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_event_store.client.shared.UUID'(<<>>, 0, 0, _, F@_1, _) -> #'event_store.client.shared.UUID'{value = F@_1}.

'd_field_event_store.client.shared.UUID_structured'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'd_field_event_store.client.shared.UUID_structured'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_event_store.client.shared.UUID_structured'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_event_store.client.shared.UUID.Structured'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_event_store.client.shared.UUID'(RestF,
                                                        0,
                                                        0,
                                                        F,
                                                        case Prev of
                                                            undefined -> id({structured, NewFValue}, TrUserData);
                                                            {structured, MVPrev} -> id({structured, 'merge_msg_event_store.client.shared.UUID.Structured'(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                            _ -> id({structured, NewFValue}, TrUserData)
                                                        end,
                                                        TrUserData).

'd_field_event_store.client.shared.UUID_string'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'd_field_event_store.client.shared.UUID_string'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_event_store.client.shared.UUID_string'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_event_store.client.shared.UUID'(RestF, 0, 0, F, id({string, NewFValue}, TrUserData), TrUserData).

'skip_varint_event_store.client.shared.UUID'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'skip_varint_event_store.client.shared.UUID'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_event_store.client.shared.UUID'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.UUID'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_event_store.client.shared.UUID'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'skip_length_delimited_event_store.client.shared.UUID'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_event_store.client.shared.UUID'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_event_store.client.shared.UUID'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_event_store.client.shared.UUID'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_event_store.client.shared.UUID'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_event_store.client.shared.UUID'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.UUID'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_event_store.client.shared.UUID'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.UUID'(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_event_store.client.shared.Empty'(Bin, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.Empty'(Bin, 0, 0, 0, TrUserData).

'dfp_read_field_def_event_store.client.shared.Empty'(<<>>, 0, 0, _, _) -> #'event_store.client.shared.Empty'{};
'dfp_read_field_def_event_store.client.shared.Empty'(Other, Z1, Z2, F, TrUserData) -> 'dg_read_field_def_event_store.client.shared.Empty'(Other, Z1, Z2, F, TrUserData).

'dg_read_field_def_event_store.client.shared.Empty'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_event_store.client.shared.Empty'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'dg_read_field_def_event_store.client.shared.Empty'(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> 'skip_varint_event_store.client.shared.Empty'(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> 'skip_64_event_store.client.shared.Empty'(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> 'skip_length_delimited_event_store.client.shared.Empty'(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> 'skip_group_event_store.client.shared.Empty'(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> 'skip_32_event_store.client.shared.Empty'(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
'dg_read_field_def_event_store.client.shared.Empty'(<<>>, 0, 0, _, _) -> #'event_store.client.shared.Empty'{}.

'skip_varint_event_store.client.shared.Empty'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'skip_varint_event_store.client.shared.Empty'(Rest, Z1, Z2, F, TrUserData);
'skip_varint_event_store.client.shared.Empty'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.Empty'(Rest, Z1, Z2, F, TrUserData).

'skip_length_delimited_event_store.client.shared.Empty'(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> 'skip_length_delimited_event_store.client.shared.Empty'(Rest, N + 7, X bsl N + Acc, F, TrUserData);
'skip_length_delimited_event_store.client.shared.Empty'(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_event_store.client.shared.Empty'(Rest2, 0, 0, F, TrUserData).

'skip_group_event_store.client.shared.Empty'(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_event_store.client.shared.Empty'(Rest, 0, Z2, FNum, TrUserData).

'skip_32_event_store.client.shared.Empty'(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.Empty'(Rest, Z1, Z2, F, TrUserData).

'skip_64_event_store.client.shared.Empty'(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.Empty'(Rest, Z1, Z2, F, TrUserData).

'decode_msg_event_store.client.shared.StreamIdentifier'(Bin, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'd_field_event_store.client.shared.StreamIdentifier_streamName'(Rest, Z1, Z2, F, F@_1, TrUserData);
'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(<<>>, 0, 0, _, F@_1, _) -> #'event_store.client.shared.StreamIdentifier'{streamName = F@_1};
'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(Other, Z1, Z2, F, F@_1, TrUserData) -> 'dg_read_field_def_event_store.client.shared.StreamIdentifier'(Other, Z1, Z2, F, F@_1, TrUserData).

'dg_read_field_def_event_store.client.shared.StreamIdentifier'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_event_store.client.shared.StreamIdentifier'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'dg_read_field_def_event_store.client.shared.StreamIdentifier'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        26 -> 'd_field_event_store.client.shared.StreamIdentifier_streamName'(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_event_store.client.shared.StreamIdentifier'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> 'skip_64_event_store.client.shared.StreamIdentifier'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> 'skip_length_delimited_event_store.client.shared.StreamIdentifier'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> 'skip_group_event_store.client.shared.StreamIdentifier'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> 'skip_32_event_store.client.shared.StreamIdentifier'(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
'dg_read_field_def_event_store.client.shared.StreamIdentifier'(<<>>, 0, 0, _, F@_1, _) -> #'event_store.client.shared.StreamIdentifier'{streamName = F@_1}.

'd_field_event_store.client.shared.StreamIdentifier_streamName'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> 'd_field_event_store.client.shared.StreamIdentifier_streamName'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'd_field_event_store.client.shared.StreamIdentifier_streamName'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(RestF, 0, 0, F, NewFValue, TrUserData).

'skip_varint_event_store.client.shared.StreamIdentifier'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'skip_varint_event_store.client.shared.StreamIdentifier'(Rest, Z1, Z2, F, F@_1, TrUserData);
'skip_varint_event_store.client.shared.StreamIdentifier'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_length_delimited_event_store.client.shared.StreamIdentifier'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 ->
    'skip_length_delimited_event_store.client.shared.StreamIdentifier'(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
'skip_length_delimited_event_store.client.shared.StreamIdentifier'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(Rest2, 0, 0, F, F@_1, TrUserData).

'skip_group_event_store.client.shared.StreamIdentifier'(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(Rest, 0, Z2, FNum, F@_1, TrUserData).

'skip_32_event_store.client.shared.StreamIdentifier'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(Rest, Z1, Z2, F, F@_1, TrUserData).

'skip_64_event_store.client.shared.StreamIdentifier'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> 'dfp_read_field_def_event_store.client.shared.StreamIdentifier'(Rest, Z1, Z2, F, F@_1, TrUserData).

'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(0) -> 'Initializing';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(1) -> 'DiscoverLeader';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(2) -> 'Unknown';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(3) -> 'PreReplica';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(4) -> 'CatchingUp';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(5) -> 'Clone';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(6) -> 'Follower';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(7) -> 'PreLeader';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(8) -> 'Leader';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(9) -> 'Manager';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(10) -> 'ShuttingDown';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(11) -> 'Shutdown';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(12) -> 'ReadOnlyLeaderless';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(13) -> 'PreReadOnlyReplica';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(14) -> 'ReadOnlyReplica';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(15) -> 'ResigningLeader';
'd_enum_event_store.client.gossip.MemberInfo.VNodeState'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'event_store.client.gossip.ClusterInfo' -> 'merge_msg_event_store.client.gossip.ClusterInfo'(Prev, New, TrUserData);
        'event_store.client.gossip.EndPoint' -> 'merge_msg_event_store.client.gossip.EndPoint'(Prev, New, TrUserData);
        'event_store.client.gossip.MemberInfo' -> 'merge_msg_event_store.client.gossip.MemberInfo'(Prev, New, TrUserData);
        'event_store.client.shared.UUID.Structured' -> 'merge_msg_event_store.client.shared.UUID.Structured'(Prev, New, TrUserData);
        'event_store.client.shared.UUID' -> 'merge_msg_event_store.client.shared.UUID'(Prev, New, TrUserData);
        'event_store.client.shared.Empty' -> 'merge_msg_event_store.client.shared.Empty'(Prev, New, TrUserData);
        'event_store.client.shared.StreamIdentifier' -> 'merge_msg_event_store.client.shared.StreamIdentifier'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_event_store.client.gossip.ClusterInfo'/3}).
'merge_msg_event_store.client.gossip.ClusterInfo'(#'event_store.client.gossip.ClusterInfo'{members = PFmembers}, #'event_store.client.gossip.ClusterInfo'{members = NFmembers}, TrUserData) ->
    #'event_store.client.gossip.ClusterInfo'{members =
                                                 if PFmembers /= undefined, NFmembers /= undefined -> 'erlang_++'(PFmembers, NFmembers, TrUserData);
                                                    PFmembers == undefined -> NFmembers;
                                                    NFmembers == undefined -> PFmembers
                                                 end}.

-compile({nowarn_unused_function,'merge_msg_event_store.client.gossip.EndPoint'/3}).
'merge_msg_event_store.client.gossip.EndPoint'(#'event_store.client.gossip.EndPoint'{address = PFaddress, port = PFport}, #'event_store.client.gossip.EndPoint'{address = NFaddress, port = NFport}, _) ->
    #'event_store.client.gossip.EndPoint'{address =
                                              if NFaddress =:= undefined -> PFaddress;
                                                 true -> NFaddress
                                              end,
                                          port =
                                              if NFport =:= undefined -> PFport;
                                                 true -> NFport
                                              end}.

-compile({nowarn_unused_function,'merge_msg_event_store.client.gossip.MemberInfo'/3}).
'merge_msg_event_store.client.gossip.MemberInfo'(#'event_store.client.gossip.MemberInfo'{instance_id = PFinstance_id, time_stamp = PFtime_stamp, state = PFstate, is_alive = PFis_alive, http_end_point = PFhttp_end_point},
                                                 #'event_store.client.gossip.MemberInfo'{instance_id = NFinstance_id, time_stamp = NFtime_stamp, state = NFstate, is_alive = NFis_alive, http_end_point = NFhttp_end_point}, TrUserData) ->
    #'event_store.client.gossip.MemberInfo'{instance_id =
                                                if PFinstance_id /= undefined, NFinstance_id /= undefined -> 'merge_msg_event_store.client.shared.UUID'(PFinstance_id, NFinstance_id, TrUserData);
                                                   PFinstance_id == undefined -> NFinstance_id;
                                                   NFinstance_id == undefined -> PFinstance_id
                                                end,
                                            time_stamp =
                                                if NFtime_stamp =:= undefined -> PFtime_stamp;
                                                   true -> NFtime_stamp
                                                end,
                                            state =
                                                if NFstate =:= undefined -> PFstate;
                                                   true -> NFstate
                                                end,
                                            is_alive =
                                                if NFis_alive =:= undefined -> PFis_alive;
                                                   true -> NFis_alive
                                                end,
                                            http_end_point =
                                                if PFhttp_end_point /= undefined, NFhttp_end_point /= undefined -> 'merge_msg_event_store.client.gossip.EndPoint'(PFhttp_end_point, NFhttp_end_point, TrUserData);
                                                   PFhttp_end_point == undefined -> NFhttp_end_point;
                                                   NFhttp_end_point == undefined -> PFhttp_end_point
                                                end}.

-compile({nowarn_unused_function,'merge_msg_event_store.client.shared.UUID.Structured'/3}).
'merge_msg_event_store.client.shared.UUID.Structured'(#'event_store.client.shared.UUID.Structured'{most_significant_bits = PFmost_significant_bits, least_significant_bits = PFleast_significant_bits},
                                                      #'event_store.client.shared.UUID.Structured'{most_significant_bits = NFmost_significant_bits, least_significant_bits = NFleast_significant_bits}, _) ->
    #'event_store.client.shared.UUID.Structured'{most_significant_bits =
                                                     if NFmost_significant_bits =:= undefined -> PFmost_significant_bits;
                                                        true -> NFmost_significant_bits
                                                     end,
                                                 least_significant_bits =
                                                     if NFleast_significant_bits =:= undefined -> PFleast_significant_bits;
                                                        true -> NFleast_significant_bits
                                                     end}.

-compile({nowarn_unused_function,'merge_msg_event_store.client.shared.UUID'/3}).
'merge_msg_event_store.client.shared.UUID'(#'event_store.client.shared.UUID'{value = PFvalue}, #'event_store.client.shared.UUID'{value = NFvalue}, TrUserData) ->
    #'event_store.client.shared.UUID'{value =
                                          case {PFvalue, NFvalue} of
                                              {{structured, OPFvalue}, {structured, ONFvalue}} -> {structured, 'merge_msg_event_store.client.shared.UUID.Structured'(OPFvalue, ONFvalue, TrUserData)};
                                              {_, undefined} -> PFvalue;
                                              _ -> NFvalue
                                          end}.

-compile({nowarn_unused_function,'merge_msg_event_store.client.shared.Empty'/3}).
'merge_msg_event_store.client.shared.Empty'(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,'merge_msg_event_store.client.shared.StreamIdentifier'/3}).
'merge_msg_event_store.client.shared.StreamIdentifier'(#'event_store.client.shared.StreamIdentifier'{streamName = PFstreamName}, #'event_store.client.shared.StreamIdentifier'{streamName = NFstreamName}, _) ->
    #'event_store.client.shared.StreamIdentifier'{streamName =
                                                      if NFstreamName =:= undefined -> PFstreamName;
                                                         true -> NFstreamName
                                                      end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'event_store.client.gossip.ClusterInfo' -> 'v_msg_event_store.client.gossip.ClusterInfo'(Msg, [MsgName], TrUserData);
        'event_store.client.gossip.EndPoint' -> 'v_msg_event_store.client.gossip.EndPoint'(Msg, [MsgName], TrUserData);
        'event_store.client.gossip.MemberInfo' -> 'v_msg_event_store.client.gossip.MemberInfo'(Msg, [MsgName], TrUserData);
        'event_store.client.shared.UUID.Structured' -> 'v_msg_event_store.client.shared.UUID.Structured'(Msg, [MsgName], TrUserData);
        'event_store.client.shared.UUID' -> 'v_msg_event_store.client.shared.UUID'(Msg, [MsgName], TrUserData);
        'event_store.client.shared.Empty' -> 'v_msg_event_store.client.shared.Empty'(Msg, [MsgName], TrUserData);
        'event_store.client.shared.StreamIdentifier' -> 'v_msg_event_store.client.shared.StreamIdentifier'(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_event_store.client.gossip.ClusterInfo'/3}).
-dialyzer({nowarn_function,'v_msg_event_store.client.gossip.ClusterInfo'/3}).
'v_msg_event_store.client.gossip.ClusterInfo'(#'event_store.client.gossip.ClusterInfo'{members = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = ['v_msg_event_store.client.gossip.MemberInfo'(Elem, [members | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'event_store.client.gossip.MemberInfo'}}, F1, [members | Path])
    end,
    ok;
'v_msg_event_store.client.gossip.ClusterInfo'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'event_store.client.gossip.ClusterInfo'}, X, Path).

-compile({nowarn_unused_function,'v_msg_event_store.client.gossip.EndPoint'/3}).
-dialyzer({nowarn_function,'v_msg_event_store.client.gossip.EndPoint'/3}).
'v_msg_event_store.client.gossip.EndPoint'(#'event_store.client.gossip.EndPoint'{address = F1, port = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [address | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [port | Path], TrUserData)
    end,
    ok;
'v_msg_event_store.client.gossip.EndPoint'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'event_store.client.gossip.EndPoint'}, X, Path).

-compile({nowarn_unused_function,'v_msg_event_store.client.gossip.MemberInfo'/3}).
-dialyzer({nowarn_function,'v_msg_event_store.client.gossip.MemberInfo'/3}).
'v_msg_event_store.client.gossip.MemberInfo'(#'event_store.client.gossip.MemberInfo'{instance_id = F1, time_stamp = F2, state = F3, is_alive = F4, http_end_point = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_msg_event_store.client.shared.UUID'(F1, [instance_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time_stamp | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> 'v_enum_event_store.client.gossip.MemberInfo.VNodeState'(F3, [state | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [is_alive | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_event_store.client.gossip.EndPoint'(F5, [http_end_point | Path], TrUserData)
    end,
    ok;
'v_msg_event_store.client.gossip.MemberInfo'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'event_store.client.gossip.MemberInfo'}, X, Path).

-compile({nowarn_unused_function,'v_msg_event_store.client.shared.UUID.Structured'/3}).
-dialyzer({nowarn_function,'v_msg_event_store.client.shared.UUID.Structured'/3}).
'v_msg_event_store.client.shared.UUID.Structured'(#'event_store.client.shared.UUID.Structured'{most_significant_bits = F1, least_significant_bits = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [most_significant_bits | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [least_significant_bits | Path], TrUserData)
    end,
    ok;
'v_msg_event_store.client.shared.UUID.Structured'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'event_store.client.shared.UUID.Structured'}, X, Path).

-compile({nowarn_unused_function,'v_msg_event_store.client.shared.UUID'/3}).
-dialyzer({nowarn_function,'v_msg_event_store.client.shared.UUID'/3}).
'v_msg_event_store.client.shared.UUID'(#'event_store.client.shared.UUID'{value = F1}, Path, TrUserData) ->
    case F1 of
        undefined -> ok;
        {structured, OF1} -> 'v_msg_event_store.client.shared.UUID.Structured'(OF1, [structured, value | Path], TrUserData);
        {string, OF1} -> v_type_string(OF1, [string, value | Path], TrUserData);
        _ -> mk_type_error(invalid_oneof, F1, [value | Path])
    end,
    ok;
'v_msg_event_store.client.shared.UUID'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'event_store.client.shared.UUID'}, X, Path).

-compile({nowarn_unused_function,'v_msg_event_store.client.shared.Empty'/3}).
-dialyzer({nowarn_function,'v_msg_event_store.client.shared.Empty'/3}).
'v_msg_event_store.client.shared.Empty'(#'event_store.client.shared.Empty'{}, _Path, _) -> ok;
'v_msg_event_store.client.shared.Empty'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'event_store.client.shared.Empty'}, X, Path).

-compile({nowarn_unused_function,'v_msg_event_store.client.shared.StreamIdentifier'/3}).
-dialyzer({nowarn_function,'v_msg_event_store.client.shared.StreamIdentifier'/3}).
'v_msg_event_store.client.shared.StreamIdentifier'(#'event_store.client.shared.StreamIdentifier'{streamName = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [streamName | Path], TrUserData)
    end,
    ok;
'v_msg_event_store.client.shared.StreamIdentifier'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'event_store.client.shared.StreamIdentifier'}, X, Path).

-compile({nowarn_unused_function,'v_enum_event_store.client.gossip.MemberInfo.VNodeState'/3}).
-dialyzer({nowarn_function,'v_enum_event_store.client.gossip.MemberInfo.VNodeState'/3}).
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('Initializing', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('DiscoverLeader', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('Unknown', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('PreReplica', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('CatchingUp', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('Clone', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('Follower', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('PreLeader', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('Leader', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('Manager', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('ShuttingDown', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('Shutdown', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('ReadOnlyLeaderless', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('PreReadOnlyReplica', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('ReadOnlyReplica', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'('ResigningLeader', _Path, _TrUserData) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_event_store.client.gossip.MemberInfo.VNodeState'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'event_store.client.gossip.MemberInfo.VNodeState'}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'event_store.client.gossip.MemberInfo.VNodeState'},
      [{'Initializing', 0},
       {'DiscoverLeader', 1},
       {'Unknown', 2},
       {'PreReplica', 3},
       {'CatchingUp', 4},
       {'Clone', 5},
       {'Follower', 6},
       {'PreLeader', 7},
       {'Leader', 8},
       {'Manager', 9},
       {'ShuttingDown', 10},
       {'Shutdown', 11},
       {'ReadOnlyLeaderless', 12},
       {'PreReadOnlyReplica', 13},
       {'ReadOnlyReplica', 14},
       {'ResigningLeader', 15}]},
     {{msg, 'event_store.client.gossip.ClusterInfo'}, [#field{name = members, fnum = 1, rnum = 2, type = {msg, 'event_store.client.gossip.MemberInfo'}, occurrence = repeated, opts = []}]},
     {{msg, 'event_store.client.gossip.EndPoint'}, [#field{name = address, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = port, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'event_store.client.gossip.MemberInfo'},
      [#field{name = instance_id, fnum = 1, rnum = 2, type = {msg, 'event_store.client.shared.UUID'}, occurrence = optional, opts = []},
       #field{name = time_stamp, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
       #field{name = state, fnum = 3, rnum = 4, type = {enum, 'event_store.client.gossip.MemberInfo.VNodeState'}, occurrence = optional, opts = []},
       #field{name = is_alive, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
       #field{name = http_end_point, fnum = 5, rnum = 6, type = {msg, 'event_store.client.gossip.EndPoint'}, occurrence = optional, opts = []}]},
     {{msg, 'event_store.client.shared.UUID.Structured'},
      [#field{name = most_significant_bits, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = least_significant_bits, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}]},
     {{msg, 'event_store.client.shared.UUID'},
      [#gpb_oneof{name = value, rnum = 2,
                  fields = [#field{name = structured, fnum = 1, rnum = 2, type = {msg, 'event_store.client.shared.UUID.Structured'}, occurrence = optional, opts = []}, #field{name = string, fnum = 2, rnum = 2, type = string, occurrence = optional, opts = []}],
                  opts = []}]},
     {{msg, 'event_store.client.shared.Empty'}, []},
     {{msg, 'event_store.client.shared.StreamIdentifier'}, [#field{name = streamName, fnum = 3, rnum = 2, type = bytes, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['event_store.client.gossip.ClusterInfo',
     'event_store.client.gossip.EndPoint',
     'event_store.client.gossip.MemberInfo',
     'event_store.client.shared.UUID.Structured',
     'event_store.client.shared.UUID',
     'event_store.client.shared.Empty',
     'event_store.client.shared.StreamIdentifier'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['event_store.client.gossip.ClusterInfo',
     'event_store.client.gossip.EndPoint',
     'event_store.client.gossip.MemberInfo',
     'event_store.client.shared.UUID.Structured',
     'event_store.client.shared.UUID',
     'event_store.client.shared.Empty',
     'event_store.client.shared.StreamIdentifier'].


get_enum_names() -> ['event_store.client.gossip.MemberInfo.VNodeState'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('event_store.client.gossip.ClusterInfo') -> [#field{name = members, fnum = 1, rnum = 2, type = {msg, 'event_store.client.gossip.MemberInfo'}, occurrence = repeated, opts = []}];
find_msg_def('event_store.client.gossip.EndPoint') -> [#field{name = address, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = port, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []}];
find_msg_def('event_store.client.gossip.MemberInfo') ->
    [#field{name = instance_id, fnum = 1, rnum = 2, type = {msg, 'event_store.client.shared.UUID'}, occurrence = optional, opts = []},
     #field{name = time_stamp, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []},
     #field{name = state, fnum = 3, rnum = 4, type = {enum, 'event_store.client.gossip.MemberInfo.VNodeState'}, occurrence = optional, opts = []},
     #field{name = is_alive, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []},
     #field{name = http_end_point, fnum = 5, rnum = 6, type = {msg, 'event_store.client.gossip.EndPoint'}, occurrence = optional, opts = []}];
find_msg_def('event_store.client.shared.UUID.Structured') ->
    [#field{name = most_significant_bits, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = least_significant_bits, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}];
find_msg_def('event_store.client.shared.UUID') ->
    [#gpb_oneof{name = value, rnum = 2,
                fields = [#field{name = structured, fnum = 1, rnum = 2, type = {msg, 'event_store.client.shared.UUID.Structured'}, occurrence = optional, opts = []}, #field{name = string, fnum = 2, rnum = 2, type = string, occurrence = optional, opts = []}],
                opts = []}];
find_msg_def('event_store.client.shared.Empty') -> [];
find_msg_def('event_store.client.shared.StreamIdentifier') -> [#field{name = streamName, fnum = 3, rnum = 2, type = bytes, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('event_store.client.gossip.MemberInfo.VNodeState') ->
    [{'Initializing', 0},
     {'DiscoverLeader', 1},
     {'Unknown', 2},
     {'PreReplica', 3},
     {'CatchingUp', 4},
     {'Clone', 5},
     {'Follower', 6},
     {'PreLeader', 7},
     {'Leader', 8},
     {'Manager', 9},
     {'ShuttingDown', 10},
     {'Shutdown', 11},
     {'ReadOnlyLeaderless', 12},
     {'PreReadOnlyReplica', 13},
     {'ReadOnlyReplica', 14},
     {'ResigningLeader', 15}];
find_enum_def(_) -> error.


enum_symbol_by_value('event_store.client.gossip.MemberInfo.VNodeState', Value) -> 'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(Value).


enum_value_by_symbol('event_store.client.gossip.MemberInfo.VNodeState', Sym) -> 'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'(Sym).


'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(0) -> 'Initializing';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(1) -> 'DiscoverLeader';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(2) -> 'Unknown';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(3) -> 'PreReplica';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(4) -> 'CatchingUp';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(5) -> 'Clone';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(6) -> 'Follower';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(7) -> 'PreLeader';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(8) -> 'Leader';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(9) -> 'Manager';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(10) -> 'ShuttingDown';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(11) -> 'Shutdown';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(12) -> 'ReadOnlyLeaderless';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(13) -> 'PreReadOnlyReplica';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(14) -> 'ReadOnlyReplica';
'enum_symbol_by_value_event_store.client.gossip.MemberInfo.VNodeState'(15) -> 'ResigningLeader'.


'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('Initializing') -> 0;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('DiscoverLeader') -> 1;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('Unknown') -> 2;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('PreReplica') -> 3;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('CatchingUp') -> 4;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('Clone') -> 5;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('Follower') -> 6;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('PreLeader') -> 7;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('Leader') -> 8;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('Manager') -> 9;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('ShuttingDown') -> 10;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('Shutdown') -> 11;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('ReadOnlyLeaderless') -> 12;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('PreReadOnlyReplica') -> 13;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('ReadOnlyReplica') -> 14;
'enum_value_by_symbol_event_store.client.gossip.MemberInfo.VNodeState'('ResigningLeader') -> 15.


get_service_names() -> ['event_store.client.gossip.Gossip'].


get_service_def('event_store.client.gossip.Gossip') ->
    {{service, 'event_store.client.gossip.Gossip'}, [#rpc{name = 'Read', input = 'event_store.client.shared.Empty', output = 'event_store.client.gossip.ClusterInfo', input_stream = false, output_stream = false, opts = []}]};
get_service_def(_) -> error.


get_rpc_names('event_store.client.gossip.Gossip') -> ['Read'];
get_rpc_names(_) -> error.


find_rpc_def('event_store.client.gossip.Gossip', RpcName) -> 'find_rpc_def_event_store.client.gossip.Gossip'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_event_store.client.gossip.Gossip'('Read') -> #rpc{name = 'Read', input = 'event_store.client.shared.Empty', output = 'event_store.client.gossip.ClusterInfo', input_stream = false, output_stream = false, opts = []};
'find_rpc_def_event_store.client.gossip.Gossip'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_tuple(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"event_store.client.gossip.Gossip">>) -> 'event_store.client.gossip.Gossip';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('event_store.client.gossip.Gossip') -> <<"event_store.client.gossip.Gossip">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"event_store.client.gossip.Gossip">>, <<"Read">>) -> {'event_store.client.gossip.Gossip', 'Read'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('event_store.client.gossip.Gossip', 'Read') -> {<<"event_store.client.gossip.Gossip">>, <<"Read">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"event_store.client.gossip.ClusterInfo">>) -> 'event_store.client.gossip.ClusterInfo';
fqbin_to_msg_name(<<"event_store.client.gossip.EndPoint">>) -> 'event_store.client.gossip.EndPoint';
fqbin_to_msg_name(<<"event_store.client.gossip.MemberInfo">>) -> 'event_store.client.gossip.MemberInfo';
fqbin_to_msg_name(<<"event_store.client.shared.UUID.Structured">>) -> 'event_store.client.shared.UUID.Structured';
fqbin_to_msg_name(<<"event_store.client.shared.UUID">>) -> 'event_store.client.shared.UUID';
fqbin_to_msg_name(<<"event_store.client.shared.Empty">>) -> 'event_store.client.shared.Empty';
fqbin_to_msg_name(<<"event_store.client.shared.StreamIdentifier">>) -> 'event_store.client.shared.StreamIdentifier';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('event_store.client.gossip.ClusterInfo') -> <<"event_store.client.gossip.ClusterInfo">>;
msg_name_to_fqbin('event_store.client.gossip.EndPoint') -> <<"event_store.client.gossip.EndPoint">>;
msg_name_to_fqbin('event_store.client.gossip.MemberInfo') -> <<"event_store.client.gossip.MemberInfo">>;
msg_name_to_fqbin('event_store.client.shared.UUID.Structured') -> <<"event_store.client.shared.UUID.Structured">>;
msg_name_to_fqbin('event_store.client.shared.UUID') -> <<"event_store.client.shared.UUID">>;
msg_name_to_fqbin('event_store.client.shared.Empty') -> <<"event_store.client.shared.Empty">>;
msg_name_to_fqbin('event_store.client.shared.StreamIdentifier') -> <<"event_store.client.shared.StreamIdentifier">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"event_store.client.gossip.MemberInfo.VNodeState">>) -> 'event_store.client.gossip.MemberInfo.VNodeState';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('event_store.client.gossip.MemberInfo.VNodeState') -> <<"event_store.client.gossip.MemberInfo.VNodeState">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'event_store.client.gossip'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "gossip.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["gossip.proto", "shared.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["gossip", "shared"].


get_msg_containment("gossip") -> ['event_store.client.gossip.ClusterInfo', 'event_store.client.gossip.EndPoint', 'event_store.client.gossip.MemberInfo'];
get_msg_containment("shared") -> ['event_store.client.shared.Empty', 'event_store.client.shared.StreamIdentifier', 'event_store.client.shared.UUID', 'event_store.client.shared.UUID.Structured'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("gossip") -> 'event_store.client.gossip';
get_pkg_containment("shared") -> 'event_store.client.shared';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("gossip") -> ['event_store.client.gossip.Gossip'];
get_service_containment("shared") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("gossip") -> [{'event_store.client.gossip.Gossip', 'Read'}];
get_rpc_containment("shared") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("gossip") -> ['event_store.client.gossip.MemberInfo.VNodeState'];
get_enum_containment("shared") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"event_store.client.shared.StreamIdentifier">>) -> "shared";
get_proto_by_msg_name_as_fqbin(<<"event_store.client.shared.UUID.Structured">>) -> "shared";
get_proto_by_msg_name_as_fqbin(<<"event_store.client.shared.UUID">>) -> "shared";
get_proto_by_msg_name_as_fqbin(<<"event_store.client.gossip.EndPoint">>) -> "gossip";
get_proto_by_msg_name_as_fqbin(<<"event_store.client.shared.Empty">>) -> "shared";
get_proto_by_msg_name_as_fqbin(<<"event_store.client.gossip.MemberInfo">>) -> "gossip";
get_proto_by_msg_name_as_fqbin(<<"event_store.client.gossip.ClusterInfo">>) -> "gossip";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"event_store.client.gossip.Gossip">>) -> "gossip";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"event_store.client.gossip.MemberInfo.VNodeState">>) -> "gossip";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"event_store.client.gossip">>) -> ["gossip"];
get_protos_by_pkg_name_as_fqbin(<<"event_store.client.shared">>) -> ["shared"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.17.0".

gpb_version_as_list() ->
    [4,17,0].
